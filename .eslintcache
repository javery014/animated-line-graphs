[{"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\index.tsx":"1","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\Metric.tsx":"2","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\components\\FixedAspectRatioElement.tsx":"3","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\metric-chart-graph-helper.ts":"4","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\MetricCurrent.tsx":"5","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\smooth-path.ts":"6","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\index.tsx":"7","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\MetricChart.tsx":"8","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\components\\Tag.tsx":"9"},{"size":260,"mtime":1611028825132,"results":"10","hashOfConfig":"11"},{"size":1637,"mtime":1611029828738,"results":"12","hashOfConfig":"11"},{"size":1541,"mtime":1611008954129,"results":"13","hashOfConfig":"11"},{"size":3862,"mtime":1611030240260,"results":"14","hashOfConfig":"11"},{"size":2255,"mtime":1611029839719,"results":"15","hashOfConfig":"11"},{"size":1991,"mtime":1611008996047,"results":"16","hashOfConfig":"11"},{"size":999,"mtime":1611029255315,"results":"17","hashOfConfig":"11"},{"size":2381,"mtime":1611029789665,"results":"18","hashOfConfig":"11"},{"size":591,"mtime":1611007318463,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vew7pc",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\index.tsx",[],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\Metric.tsx",[],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\components\\FixedAspectRatioElement.tsx",[],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\metric-chart-graph-helper.ts",["40"],"import { IMetricChartData, IMetricMappedDataPoint } from '../types';;\r\n\r\n// height of the svg element\r\nconst SVG_HEIGHT = 85;\r\n\r\n// width of the svg element\r\nconst SVG_WIDTH = 255;\r\n\r\n// radius of the circle at the tip of the line\r\nconst CIRCLE_RADIUS = 5;\r\n\r\n// [start, end] of the x axis of the grid\r\nconst GRID_AXIS_X = [0, SVG_WIDTH - CIRCLE_RADIUS];\r\n\r\n// [start, end] of the y axis of the grid\r\nconst GRID_AXIS_Y = [CIRCLE_RADIUS, SVG_HEIGHT - 2];\r\n\r\n// month translations\r\nconst SHORT_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n/**\r\n * Gets the y values for the horizontal grid lines\r\n * @returns {number[]} an array of y values\r\n */\r\nfunction getGridLineYValues(): number[] {\r\n  return [\r\n    GRID_AXIS_Y[0],\r\n    getAxisLength(GRID_AXIS_Y) / 3 + GRID_AXIS_Y[0],\r\n    getAxisLength(GRID_AXIS_Y) * (2 / 3) + GRID_AXIS_Y[0],\r\n    GRID_AXIS_Y[1]\r\n  ]\r\n}\r\n\r\n// Gets the length of an axis (represented as a tuple)\r\nfunction getAxisLength(axis: number[]): number {\r\n  return axis[1] - axis[0];\r\n}\r\n\r\n/**\r\n * Creates a label for when x=0\r\n * @param {IMetricChartData} dataPoints Array of data points from API\r\n * @returns {string} text label to display when x=0\r\n */\r\nfunction getXAxisStartLabel(dataPoints: IMetricChartData): string {\r\n  dataPoints = dataPoints.sort((m1, m2) => m1.time - m2.time);\r\n  const xValues = dataPoints.map(m => m.time);\r\n  const dateStart = new Date(Math.min(...xValues) * 1000);\r\n  return `${SHORT_MONTHS[dateStart.getMonth()]} ${dateStart.getFullYear()}`;\r\n}\r\n\r\n/**\r\n * Takes a list of raw datapoints for the graph, and maps the data to\r\n * coordinates which will be used in the line for the svg. With this\r\n * function, we're creating a line who's first point visually starts\r\n * at [0, {yMin}] (which is very close to [0, 0]), and whose last point\r\n * ends at the top right of the graph: [GRID_AXIS_X[1], GRID_AXIS_Y[1]]\r\n * @param {IMetricChartData} dataPoints Metric data from api\r\n * @returns {IMetricMappedDataPoint[]}\r\n */\r\nfunction mapDataToSvgCoordinates(dataPoints: IMetricChartData): IMetricMappedDataPoint[] {\r\n  // For x and y, get the values to be used as datapoints\r\n  const xValues = dataPoints.map((m) => m.time);\r\n  const yValues = dataPoints.map((m) => m.value);\r\n\r\n  // Min/max values from the API data which will be used\r\n  // as the foundation for determining the mapped SVG coordinates\r\n  const xMax = Math.max(...xValues);\r\n  const xMin = Math.min(...xValues);\r\n  const yMax = Math.max(...yValues);\r\n  const yMin = 0;\r\n\r\n  return xValues.map((xValue, i) => {\r\n\r\n    // Get a factor to scale an API datapoint's x value to\r\n    // an x value in the SVG grid\r\n    const xScaleFactor = getAxisLength(GRID_AXIS_X) / (xMax - xMin);\r\n\r\n    // Subtract xMin from the current xValue (since xMin is going\r\n    // to be treated as 0 in the SVG grid), and multiply it by the\r\n    // xScaleFactor value to scale the x value to an appropriate value\r\n    // in the SVG grid\r\n    const mappedX = (xValue - xMin) * xScaleFactor;\r\n\r\n    // Same logic as with getting the xScaleFactor\r\n    const yScaleFactor = getAxisLength(GRID_AXIS_Y) / (yMax - yMin);\r\n\r\n    // Same logic as with scaling the xValue. The only difference here is\r\n    // the positive Y direction goes DOWNWARD in the SVG coordinate system,\r\n    // which means this is an inverted y value of what needs to be shown\r\n    // in the SVG grid\r\n    const invertedMappedY = (dataPoints[i].value - yMin) * yScaleFactor;\r\n\r\n    // Get the correct mapped Y value by subtracting the invertedYValue\r\n    // from the max value of the SVG grid y axis\r\n    const mappedY = GRID_AXIS_Y[1] - invertedMappedY;\r\n\r\n\r\n    return { x: mappedX, y: mappedY };\r\n  });\r\n}\r\n\r\nexport default {\r\n  SVG_WIDTH,\r\n  SVG_HEIGHT,\r\n  GRID_AXIS_X,\r\n  GRID_AXIS_Y,\r\n  getGridLineYValues,\r\n  getXAxisStartLabel,\r\n  mapDataToSvgCoordinates\r\n}","C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\MetricCurrent.tsx",[],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\smooth-path.ts",[],["41","42"],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\index.tsx",["43","44"],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\metrics\\MetricChart.tsx",[],"C:\\Users\\javer\\dev\\animated-line-graphs\\project\\src\\components\\Tag.tsx",[],{"ruleId":"45","severity":1,"message":"46","line":102,"column":1,"nodeType":"47","endLine":110,"endColumn":2},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":12,"column":5,"nodeType":"54","messageId":"55","endLine":14,"endColumn":6,"fix":"56"},{"ruleId":"52","severity":1,"message":"57","line":15,"column":5,"nodeType":"54","messageId":"55","endLine":17,"endColumn":6,"fix":"58"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-useless-computed-key","Unnecessarily computed property ['@media(min-width: 550px)'] found.","Property","unnecessarilyComputedProperty",{"range":"61","text":"62"},"Unnecessarily computed property ['@media(min-width: 920px)'] found.",{"range":"63","text":"64"},"no-global-assign","no-unsafe-negation",[299,327],"'@media(min-width: 550px)'",[379,407],"'@media(min-width: 920px)'"]